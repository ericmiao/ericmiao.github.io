<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Another Code Farmer's Backyard</title><link href="http://ericmiao.github.io/" rel="alternate"></link><link href="http://ericmiao.github.io/feeds/eric-miao.atom.xml" rel="self"></link><id>http://ericmiao.github.io/</id><updated>2016-04-06T00:00:00-07:00</updated><entry><title>使用神经网络识别手写数字</title><link href="http://ericmiao.github.io/blog/2016/04/06/using-neural-nets-to-recognize-handwritten-digits/" rel="alternate"></link><updated>2016-04-06T00:00:00-07:00</updated><author><name>Eric Miao</name></author><id>tag:ericmiao.github.io,2016-04-06:blog/2016/04/06/using-neural-nets-to-recognize-handwritten-digits/</id><summary type="html">&lt;script type="text/x-mathjax-config"&gt;
  MathJax.Hub.Config({
    tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]},
    TeX: { equationNumbers: { autoNumber: "AMS" } }
  });
&lt;/script&gt;

&lt;script type="text/javascript" async
  src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_CHTML"&gt;
&lt;/script&gt;

&lt;!-- PELICAN_BEGIN_SUMMARY --&gt;

&lt;p&gt;人类的视觉系统是世界的一大奇迹，我们来看下面一组手写数字：&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;&lt;img alt="手写数字-504192" src="http://ericmiao.github.io/images/504192.png" title="=200x" /&gt;&lt;/p&gt;
&lt;p&gt;相信大部分人都可以毫不费力地认出这几个数字--504192。可别让这“毫不费力”
把你给骗了，在我们大脑的左右两个半脑中，有一片主视觉皮层V1，那里有
1亿4千万个神经元，中间有上百亿个连接。除了V1区域，人类视觉还用到了
整片整片的其他视觉皮层，V2、V3、V4、V5，它们一起进行着复杂的图像处理。
我们脖子上面，可是一台超级计算机，它在几亿年的进化过程中，已经很好地
适应了认知这个视觉世界的能力。识别手写数字其实并不容易，但由于人类的
视觉认知能力实在过于强大，大部分处理在潜意识就完成了，我们通常都意识
不到视觉系统所解决的问题有多么得复杂。&lt;/p&gt;
&lt;p&gt;当你准备写一个计算机程序来识别上面这些数字时侯，视觉模式识别的难度就
凸显出来了。我们做起来这么容易的事情一下子变得无比困难：那些用于分辨
形状的简单直觉--比如9上面有一个圈，右边有一竖--这些通过算法来做都不
简单。并且当你试图精确描述这些规则的时候，你会发现总有这样那样的例外
或特殊情况，让人觉得这么做简直就是徒劳。&lt;/p&gt;
&lt;p&gt;神经网络试图从不同的方向来解决这个问题，主要想法是利用大量已知的手写
数字，这些称为训练样本 (training examples)，&lt;/p&gt;
&lt;p&gt;&lt;img alt="手写数字训练样本" src="http://ericmiao.github.io/images/mnist_100_digits.png" /&gt;&lt;/p&gt;
&lt;p&gt;并籍此发展一个系统来学习这些样本。换句话讲，神经网络使用样本来自动
推算出识别这些数字的规则。而且，通过增加样本的数量，它可以学习更多
手写特征，并改善其识别率。上面只列出了100个样本，但通过几千，几百
万甚至上亿的样本我们可以打造一个更好的识别网络。&lt;/p&gt;
&lt;p&gt;在这一章里，我们将编写一个计算机程序，实现一个可以识别手写数字的神经
网络。这个程序只有74行，而且没有使用任何特殊的神经网络库。不过这一
简短程序对手写数字的识别率可以高达96% 且无需任何人工干预。在后面的章节
我们将发展一些新的技术，让识别率增加到99%以上。事实上，最好的商用神经
网络工作得如此之好，它们已经被大量用在银行识别支票，邮局识别地址等场合了。&lt;/p&gt;
&lt;p&gt;我们关注手写识别，因为这是学习神经网络一个很好的问题。而它又恰恰足够
有难度：不是一个简单的任务，但又没有难到需要特别复杂的方法。而且，它
非常适合拓展出一些更高级的技术，比如深度学习(deep learning)，因此本书
前后都会重复提到手写识别的问题。本书后面我们也将提到这些想法是如何应
用到其他方面的，比如计算机视觉，语音和自然语言处理等。&lt;/p&gt;
&lt;p&gt;当然，如果这一章的目的仅仅是写一个计算机程序来识别手写数字，那我们也
不用这么多篇幅了。所以这里，我们将介绍一些神经网络的关键概念，比如
两种重要的神经元 (perceptron 和 sigmoid neuron)，以及被称作
Stochastic Gradient Descent（随机递解）的标准学习算法。这个过程中，
我将集中解释它们为什么是这么这样设计的，以便让你对神经网络有更直观的
感受。相比简单地列出其工作机制，我们需要用更多篇幅来讨论细节，但这些
细节将有助于加深了解。其中一点，在看完这一章后，我们将更好地理解什么
是深度学习 (Deep Learning)，以及为什么我们需要关注它。&lt;/p&gt;
&lt;h3&gt;感知神经元 (Perceptrons)&lt;/h3&gt;
&lt;p&gt;什么是神经网络？要回答这个问题，我们先介绍一种叫做感知神经元 (Perceptrons)
的人工神经元。感知神经元的概念由科学家 Frank Rosenblatt&lt;a href="http://en.wikipedia.org/wiki/Frank_Rosenblatt"&gt;1&lt;/a&gt; 在50年
代和60年代提出，在之前 Warren McCulloch 和 Walter Pitts 的工作&lt;a href="http://scholar.google.ca/scholar?cluster=4035975255085082870"&gt;2&lt;/a&gt;
基础上发展而来&lt;a href="http://books.google.ca/books/about/Principles_of_neurodynamics.html?id=7FhRAAAAMAAJ"&gt;3&lt;/a&gt;。我们今天更多使用其他类型的神经元，其中主要的一种
称为S型神经元 (Sigmoid Neuron)。我们很快将讲到S型神经元，在此之前，
了解一下 Perceptron 将有助于了解为什么S型神经元是这样定义的。&lt;/p&gt;
&lt;p&gt;那么，感知神经元到底是怎么工作的呢？一个感知神经元可以接收多个二进制
输入: $x_1, x_2$, ...，并产生一个二进制输出&lt;/p&gt;
&lt;p&gt;&lt;img alt="感知神经元示意图" src="http://ericmiao.github.io/images/tikz0.png" /&gt;&lt;/p&gt;
&lt;p&gt;上面这个感知神经元有三个输入，$x_1, x_2, x_3$，但它通常可以有更多
或更少的输入。Rosenblatt 提出了一种计算输出的简单方法。他引入了权重
(weight) 的概念，$w_1, w_2$ ... 这些权重表示各个输入对输出所起的重要
程度。输出的结果为 0 还是 1，取决于权重和 $\sum_j w_j x_j$ 是否小于
或大于某个阈值。和权重一样，阈值也是神经元所特有的一个数字。更精确的
代数表达如下:&lt;/p&gt;
&lt;p&gt;$$
\begin{eqnarray}
 \mbox{output} = \begin{cases}
  0 \mbox{ if } \sum_j w_j x_j \leq \mbox{ threshold } \\
  1 \mbox{ if } \sum_j w_j x_j \gt \mbox{ threshold }
  \end{cases}
\end{eqnarray}
$$&lt;/p&gt;
&lt;p&gt;这就是单个感知神经元的工作原理了。&lt;/p&gt;
&lt;p&gt;以上是基本的数学模型。你可以认为感知神经元是一个根据输入权重做决定的
单元。举个不太现实但比较容易理解的例子，假设马上就要周末了，听说镇上
会有一个烧饼节，你很喜欢吃烧饼，并在考虑是不是要参加，你可能会根据下
面三个因素做出选择:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;天气好不好?&lt;/li&gt;
&lt;li&gt;你男朋友或者女朋友会不会陪你参加?&lt;/li&gt;
&lt;li&gt;举办地点离公交站近不近？(假设你没车)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我们用三个布尔变量 $x_1, x_2, x_3$ 来代表这些因素，比如 $x_1=1$ 表示
天气很好，$x_1=0$ 表示天气很糟。同样，$x_2=1$ 表示你的男女朋友会去，
$x_2=0$ 表示不会去，$x_3$ 离公交站近或者远。&lt;/p&gt;
&lt;p&gt;现在我们假设你太喜欢吃烧饼了，以至于你的男女朋友去不去，公交车站离得
远近你都无所谓。不过你对天气很挑剔，如果天气不好打死你也不会去。这种
情况我们依然可以用感知神经元来表示这一决定过程。一种方式是选择天气的
权重 $w_1=6$，并且另外两个因素的权重分别为 $w_2=2$ 以及 $w_3=2$。
$w_1$ 的值比较大意味着天气很重要，比你男女朋友是否同去或者离公交站远近
都来得更加重要。最后假定感知神经元的阈值为5。根据以上假设，这一神经元
就是你做决定的一个模型，天气好就输出1，天气不好输出0，你的男女朋友会不
会去、公交站近不近都不会对输出有任何影响。(译者：天气好 $x_1=1$ 意味着
$\sum_{j=0,1,2} x_j w_j \geq 6$ 总是大于阈值5)&lt;/p&gt;
&lt;p&gt;通过改变权重和阈值，我们可以有不同的模型。比如，如果我们选择阈值3，
该神经元的输出除了考虑天气外，还会考虑你的男女朋友是否会去，以及公交站
远近的情况。换句话说，这是一个不同的决策模型，降低阈值表示你更愿意去。&lt;/p&gt;
&lt;p&gt;显然，感知神经元并非一个完整的人类决策模型！但是这个例子展示了它是如何
根据不同条件的权重做出决策的。我们相信更复杂的神经元网络可以做出更精妙
的决策:&lt;/p&gt;
&lt;p&gt;&lt;img alt="多层神经元网络" src="http://ericmiao.github.io/images/tikz1.png" /&gt;&lt;/p&gt;
&lt;p&gt;这个网络中第一列，我们称之为第一层神经元，将权衡输入产生三个简单的
输出。第二层中的每一个神经元将根据不同权重评估第一层的输出并产生进
一步的输出。于是，第二层的神经元可以比第一层作出更复杂更抽象的决定。
同理，第三层产生比第二层更复杂的输出。这样，多层的神经元网络可以帮助
做出相当复杂的决策。&lt;/p&gt;
&lt;p&gt;在介绍感知神经元的时候，我们提到了单个神经元产生单个输出。但在上面
的网络中，它们看上去有多个输出，这只是方便表示某个神经元的输出被连接
到其他多个神经元的输入而已，事实上这些神经元的确只有一个输出。
画成单条输出线然后再分叉不太美观。&lt;/p&gt;
&lt;p&gt;现在我们再来简化一下感知神经元的描述。写成 $\sum_j w_j x_j &amp;gt; \mbox{ threshold}$
貌似有些复杂，我们可以有两种简化。第一，我们写成点积 (dot product)
的形式，$ w \cdot x \equiv \sum_j w_j x_j$，其中 $w$ 和 $x$ 分别是
权重和输入的向量形式。第二，把阈值搬到不等式左边，并把它叫做神经元
的偏差(bias)，$ b \equiv -threshold $。这样我们可以重写公式:&lt;/p&gt;
&lt;p&gt;$$
\begin{eqnarray}
 \mbox{output} = \begin{cases}
  0 \mbox{ if } w \cdot x + b \leq 0 \\
  1 \mbox{ if } w \cdot x + b \gt 0
  \end{cases}
\end{eqnarray}
$$&lt;/p&gt;
&lt;p&gt;你可以把偏差(bias)理解为是否容易输出1。生物学上来说，就是
让神经元激活(fire)的难易程度。对于一个偏差很大的神经元，让它产生1
会相当容易。但如果偏差是一个很大的负数，产生1就会相当困难。显然，
引入偏差仅仅是对神经元的描述作了一点小小的改变，后面我们将看到
它可以帮助进一步简化。因此从这里开始我们都将只用偏差(bias)而不
再用阈值了。&lt;/p&gt;</summary></entry><entry><title>Setup a personal TiddlyWiki on OpenShift</title><link href="http://ericmiao.github.io/blog/2014/04/05/setup-personal-tiddlywiki-on-openshift/" rel="alternate"></link><updated>2014-04-05T00:00:00-07:00</updated><author><name>Eric Miao</name></author><id>tag:ericmiao.github.io,2014-04-05:blog/2014/04/05/setup-personal-tiddlywiki-on-openshift/</id><summary type="html">&lt;!-- PELICAN_BEGIN_SUMMARY --&gt;

&lt;p&gt;I have always been looking for a perfect personal note taking tool, and tried
many different things, yet I'm satisified with none of them.
&lt;a href="http://evernote.com"&gt;Evernote&lt;/a&gt; is neat and clean, has great support for rich
text format, as well as pictures, audio and video. It's also web based, and
has nice apps on almost all the popular desktop and mobile OSes.  Honestly,
it has everything you would expect for a personal note taking tool, probably
even more. But there is only one thing missing, a markup language of your
choice.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://tiddlywiki.com"&gt;TiddlyWiki&lt;/a&gt; is an interesting tool, that it's written
completely in JavaScript and run in a client browser. I used to take notes
with TiddlyWiki in firefox with a plugin to save to local file, and put that
file in my GoogleDrive sync folder.  I was almost satisfied except for once
that I forgot to click the save button and a full day work was gone. I mean,
come on, it's 2014, and we don't really need a save button like 20 years ago
right?&lt;/p&gt;
&lt;p&gt;&lt;img alt="TiddlyWiki5 Getting Started page" src="http://ericmiao.github.io/images/tiddlywiki5.png" /&gt;&lt;/p&gt;
&lt;p&gt;Fortunately, the latest &lt;a href="https://github.com/Jermolene/TiddlyWiki5"&gt;TiddlyWiki5&lt;/a&gt;
seems to have all these fixed, and it didn't take me very long to have a
perfect setup on &lt;a href="http://openshift.com"&gt;OpenShift&lt;/a&gt;.
&lt;!-- PELICAN_END_SUMMARY --&gt;&lt;/p&gt;
&lt;h3&gt;Cloud App Hosting&lt;/h3&gt;
&lt;p&gt;The latest &lt;a href="https://github.com/Jermolene/TiddlyWiki5"&gt;TiddlyWiki5&lt;/a&gt; can be
hosted on a server with &lt;a href="http://nodejs.org"&gt;nodejs&lt;/a&gt;.  There are many free
App hosting sites like &lt;a href="http://nodejitsu.com"&gt;nodejitsu&lt;/a&gt; and
&lt;a href="http://heroku.com"&gt;heroku&lt;/a&gt;, of which I like &lt;a href="http://openshift.com"&gt;OpenShift&lt;/a&gt;
the most.  The bias is not because OpenShift is backed by the famous open
source company RedHat, but that I have to agree they do have a good
understanding of what a developer with Unix background really needs,
paticularly the SSH connection that I can manage the app, storage,
and check what's going in a familiar way.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://www.openshift.com/products/pricing"&gt;free plan&lt;/a&gt; supports up to 3
small gears, which is sufficient to get started.&lt;/p&gt;
&lt;p&gt;&lt;img alt="OpenShift Getting Started page" src="http://ericmiao.github.io/images/openshift.png" /&gt;&lt;/p&gt;
&lt;h3&gt;Setting up TiddlyWiki5 on OpenShift&lt;/h3&gt;
&lt;p&gt;While OpenShift supports app management from web or IDE, a command line is
still my best friend, and especially &lt;a href="https://www.openshift.com/get-started#cli"&gt;rhc&lt;/a&gt;
is such an intuitive one.&lt;/p&gt;
&lt;p&gt;Installation is easy on Ubuntu once you get an account,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo apt-get install rubygems
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo gem install rhc
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo gem update rhc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now use &lt;code&gt;rhc&lt;/code&gt; to create an app with nodejs as backend,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;rhc setup &lt;span class="c"&gt;# login, setup SSH keys and domain&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;rhc app create tiddlywiki5 nodejs-0.10 --no-git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You will need to pick up your domain, so your app can be accessed from&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;appname&amp;gt;-&amp;lt;domain&amp;gt;.rhcloud.com&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;--no-git&lt;/code&gt; tells &lt;code&gt;rhc&lt;/code&gt; &lt;em&gt;not&lt;/em&gt; to create a local git repo (however, an empty
git repo on the server is still created), as we will use TiddlyWiki5 on
github as the repo instead of starting from a new.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;rhc apps&lt;/code&gt; will give an overview of the apps of your account, e.g.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;tiddlywiki5 @ http://tiddlywiki5-domain.rhcloud.com/ &lt;span class="o"&gt;(&lt;/span&gt;uuid: 123456789abcdef012345678&lt;span class="o"&gt;)&lt;/span&gt;
--------------------------------------------------------------------
  Domain:     domain
  Created:    Mar &lt;span class="m"&gt;27&lt;/span&gt;  9:52 PM
  Gears:      &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;defaults to small&lt;span class="o"&gt;)&lt;/span&gt;
  Git URL:    ssh://123456789abcdef012345678@tiddlywiki5-domain.rhcloud.com/~/git/tiddlywiki5.git/
  SSH:        123456789abcdef012345678@tiddlywiki5-domain.rhcloud.com
  Deployment: auto &lt;span class="o"&gt;(&lt;/span&gt;on git push&lt;span class="o"&gt;)&lt;/span&gt;

  nodejs-0.10 &lt;span class="o"&gt;(&lt;/span&gt;Node.js 0.10&lt;span class="o"&gt;)&lt;/span&gt;
  --------------------------
    Gears: &lt;span class="m"&gt;1&lt;/span&gt; small
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next, download TiddlyWiki5 from github and push to the remote git,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/Jermolene/TiddlyWiki5
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;TiddlyWiki5
&lt;span class="nv"&gt;$ &lt;/span&gt;git remote add rhc &amp;lt;git-url&amp;gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git push -f rhc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;&amp;lt;git-url&amp;gt;&lt;/code&gt; being the &lt;code&gt;Git URL:&lt;/code&gt; displayed by &lt;code&gt;rhc apps&lt;/code&gt;. OpenShift will
try to automatically deploy the app just pushed.&lt;/p&gt;
&lt;p&gt;However, if you access http://tiddlywiki5-&lt;yourdomain&gt;.rhcloud.com, you
will get a 404, page not found.  We need to tell OpenShift how to start
the app with some change like below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gh"&gt;diff --git a/package.json b/package.json&lt;/span&gt;
&lt;span class="gh"&gt;index c579df2..90a0ede 100644&lt;/span&gt;
&lt;span class="gd"&gt;--- a/package.json&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/package.json&lt;/span&gt;
&lt;span class="gu"&gt;@@ -13,7 +13,7 @@&lt;/span&gt;
   &amp;quot;bin&amp;quot;: {
     &amp;quot;tiddlywiki&amp;quot;: &amp;quot;./tiddlywiki.js&amp;quot;
   },
&lt;span class="gd"&gt;-  &amp;quot;main&amp;quot;: &amp;quot;./boot/boot.js&amp;quot;,&lt;/span&gt;
&lt;span class="gi"&gt;+  &amp;quot;main&amp;quot; : &amp;quot;./server.js&amp;quot;,&lt;/span&gt;
   &amp;quot;repository&amp;quot;: {
     &amp;quot;type&amp;quot;: &amp;quot;git&amp;quot;,
     &amp;quot;url&amp;quot;: &amp;quot;https://github.com/Jermolene/TiddlyWiki5.git&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And create a server.js file to start the App:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;$tw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;./boot/boot.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;TiddlyWiki&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;$tw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;boot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;OPENSHIFT_DATA_DIR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;--verbose&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;--server&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;OPENSHIFT_NODEJS_PORT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;$:/core/save/all&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;text/plain&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;text/html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;&amp;lt;username&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;&amp;lt;password&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;OPENSHIFT_NODEJS_IP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;$tw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;boot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;boot&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;OpenShift will try to execute server.js for a nodejs app. Note the
ip address and port will have to be aligned with OpenShift, so the
requests can be redirected to your app. OpenShift provides two
environment variables &lt;code&gt;OPENSHIFT_NODEJS_IP&lt;/code&gt; and &lt;code&gt;OPENSHIFT_NODEJS_PORT&lt;/code&gt;
for this purpose.&lt;/p&gt;
&lt;p&gt;And for file-system based storage, OpenShift offers a directory for
use in variable &lt;code&gt;OPENSHIFT_DATA_DIR&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;With the change, you have to commit and push to re-deploy.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git commit -a -m &lt;span class="s2"&gt;&amp;quot;Update for deployment on OpenShift&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git push -f rhc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now you should be able see TiddlyWiki5 show up. If not, you can
ssh to the server and check what's going wrong. The logs will be
in nodejs/logs/node.log.&lt;/p&gt;
&lt;h3&gt;Escape of character "/"&lt;/h3&gt;
&lt;p&gt;There is still one more issue, when you create a new tiddler, you
will normally get a sync error.  This seems to be an issue with
OpenShift, as long as your URL request contains character &lt;code&gt;/&lt;/code&gt;, even
if it is escaped as &lt;code&gt;%2F&lt;/code&gt;, it will still be recognized and filtered.&lt;/p&gt;
&lt;p&gt;To workaround this issue, we would have to escape the &lt;code&gt;/&lt;/code&gt; character
in a tiddler title to be something else. Currently I am using a naive
change like below.&lt;/p&gt;
&lt;p&gt;When a url is generated for a tiddler to be uploaded to the server,
we escape it to something else in &lt;code&gt;plugins/tiddlywiki/tiddlyweb/tiddlywebadaptor.js&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;encodeTiddlerTitle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;encodeURIComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/\//g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;%SLASH%&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And when the node.js server receives the request, it has to restore
the escaped sequence back to the original character in
&lt;code&gt;core/modules/commands/server.js&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;decodeTiddlerTitle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;decodeURIComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/%SLASH%/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The full diff can be found &lt;a href="https://github.com/ericmiao/TiddlyWiki5/commit/4e91836909561fbcf0a7d8e715b3599bc6dcdd4d"&gt;here&lt;/a&gt;.&lt;/p&gt;</summary></entry><entry><title>My first post with pelican octopress theme</title><link href="http://ericmiao.github.io/blog/2014/04/03/my-first-post-with-pelican-octopress-theme/" rel="alternate"></link><updated>2014-04-03T00:00:00-07:00</updated><author><name>Eric Miao</name></author><id>tag:ericmiao.github.io,2014-04-03:blog/2014/04/03/my-first-post-with-pelican-octopress-theme/</id><summary type="html">&lt;!-- PELICAN_BEGIN_SUMMARY --&gt;

&lt;p&gt;Not a big fan of blog, but I was really fascinated by this idea of having a
static microblog site which is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;written in plain text with your preferred markup language&lt;/li&gt;
&lt;li&gt;generated and themed on-the-fly&lt;/li&gt;
&lt;li&gt;version controlled by git&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While &lt;a href="http://jekyllrb.com"&gt;Jekyll&lt;/a&gt; and &lt;a href="http://octopress.org"&gt;Octopress&lt;/a&gt; are
two such excellent tools, they are all written in Ruby, which I'm not quite
familiar with.  I was not able to find a Python equivalent tool until not very
long ago I found &lt;a href="http://jakevdp.github.io"&gt;Jake's blog&lt;/a&gt;.  It was well themed
and all the articles are great to read.  I can't refrain the idea of having
a similar blog site of my own.  It turned out to be not very complicated, I
am using Ubuntu and followed the steps below.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;h3&gt;Install prerequisites:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://getpelican.com"&gt;pelican&lt;/a&gt; - a python based static site generator&lt;/li&gt;
&lt;li&gt;&lt;a href="http://https://help.github.com/articles/markdown-basics"&gt;markdown&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo apt-get install pip
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo pip install pelican
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo pip install markdown
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Install octopress theme for pelican&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/duilio/pelican-octopress-theme
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo pelican-themes -i pelican-octopress-theme pelican-octopress-theme/
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;&lt;a href="http://docs.getpelican.com/en/3.3.0/getting_started.html"&gt;Kickstart&lt;/a&gt; the site with pelican&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pelican-quickstart 
Welcome to pelican-quickstart v3.3.0.

This script will &lt;span class="nb"&gt;help &lt;/span&gt;you create a new Pelican-based website.

Please answer the following questions so this script can generate the files
needed by Pelican.


&amp;gt; Where &lt;span class="k"&gt;do&lt;/span&gt; you want to create your new web site? &lt;span class="o"&gt;[&lt;/span&gt;.&lt;span class="o"&gt;]&lt;/span&gt; 
&amp;gt; What will be the title of this web site? Another Code Farmer&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s Backyard
&amp;gt; Who will be the author of this web site? Eric Miao
&amp;gt; What will be the default language of this web site? &lt;span class="o"&gt;[&lt;/span&gt;en&lt;span class="o"&gt;]&lt;/span&gt; 
&amp;gt; Do you want to specify a URL prefix? e.g., http://example.com   &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; n
&amp;gt; Do you want to &lt;span class="nb"&gt;enable &lt;/span&gt;article pagination? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; n
&amp;gt; Do you want to generate a Fabfile/Makefile to automate generation and publishing? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; 
&amp;gt; Do you want an auto-reload &lt;span class="p"&gt;&amp;amp;&lt;/span&gt; simpleHTTP script to assist with theme and site development? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; 
&amp;gt; Do you want to upload your website using FTP? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; 
&amp;gt; Do you want to upload your website using SSH? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; 
&amp;gt; Do you want to upload your website using Dropbox? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; 
&amp;gt; Do you want to upload your website using S3? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; 
&amp;gt; Do you want to upload your website using Rackspace Cloud Files? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Voila! Create your first article&lt;/h3&gt;
&lt;p&gt;Creating a plain text file in the folder of &lt;code&gt;content&lt;/code&gt;, name the file in format
&lt;code&gt;yyyy-mm-dd-&amp;lt;post-topic&amp;gt;.md&lt;/code&gt;.  For &lt;a href="http://docs.getpelican.com/en/3.3.0/getting_started.html#writing-content-using-pelican"&gt;example&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;My&lt;/span&gt; &lt;span class="kd"&gt;super&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;
&lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2010&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;03&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;
&lt;span class="n"&gt;Tags&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pelican&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;publishing&lt;/span&gt;
&lt;span class="n"&gt;Slug&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;my&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;
&lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Alexis&lt;/span&gt; &lt;span class="n"&gt;Metaireau&lt;/span&gt;
&lt;span class="n"&gt;Summary&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Short&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;feeds&lt;/span&gt;

&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;my&lt;/span&gt; &lt;span class="kd"&gt;super&lt;/span&gt; &lt;span class="n"&gt;blog&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Change pelicanconf.py to use octopress theme:&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gh"&gt;diff --git a/pelicanconf.py b/pelicanconf.py&lt;/span&gt;
&lt;span class="gh"&gt;index 590c26d..c6b05d1 100644&lt;/span&gt;
&lt;span class="gd"&gt;--- a/pelicanconf.py&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/pelicanconf.py&lt;/span&gt;
&lt;span class="gu"&gt;@@ -29,3 +29,5 @@ DEFAULT_PAGINATION = False&lt;/span&gt;

 # Uncomment following line if you want document-relative URLs when developing
 #RELATIVE_URLS = True
&lt;span class="gi"&gt;+&lt;/span&gt;
&lt;span class="gi"&gt;+THEME = &amp;#39;pelican-octopress-theme&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Generate and check the site:&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;make html
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;output &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; python -m SimpleHTTPServer
Serving HTTP on 0.0.0.0 port &lt;span class="m"&gt;8000&lt;/span&gt; ...
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Deploy when satisfied&lt;/h3&gt;
&lt;p&gt;For example, &lt;a href="http://pages.github.com/"&gt;github pages&lt;/a&gt; is a good choice.&lt;/p&gt;</summary></entry></feed>